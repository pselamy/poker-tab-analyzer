import { Browser, Page } from 'puppeteer';
import { setupBrowser, createExtensionPage, teardownBrowser, loadTestPage } from './setup';
import * as path from 'path';

describe('Poker Tab Analyzer Extension', () => {
  let browser: Browser;
  let extensionPage: Page;
  let contentPage: Page;

  beforeAll(async () => {
    browser = await setupBrowser();
  });

  afterAll(async () => {
    await teardownBrowser(browser);
  });

  beforeEach(async () => {
    extensionPage = await createExtensionPage(browser);
    contentPage = await browser.newPage();
  });

  afterEach(async () => {
    await extensionPage.close();
    await contentPage.close();
  });

  describe('Extension Popup', () => {
    it('should load the popup page', async () => {
      const title = await extensionPage.title();
      expect(title).toBe('Poker Tab Analyzer');
    });

    it('should display the correct UI elements', async () => {
      // Check for main heading
      const heading = await extensionPage.$eval('h1', (el) => el.textContent);
      expect(heading).toBe('Poker Tab Analyzer');

      // Check for analyze button
      const analyzeButton = await extensionPage.$('#analyzeButton');
      expect(analyzeButton).toBeTruthy();

      // Check for results section
      const resultsSection = await extensionPage.$('#results');
      expect(resultsSection).toBeTruthy();
    });

    it('should show initial empty state', async () => {
      const resultsText = await extensionPage.$eval('#results', (el) => el.textContent);
      expect(resultsText?.trim()).toBe('');
    });
  });

  describe('Content Script Injection', () => {
    it('should inject content script into poker pages', async () => {
      // Load the test page
      const testPagePath = path.resolve(__dirname, '../../chrome-extension/test-page.html');
      await loadTestPage(contentPage, testPagePath);

      // Wait for content script to be injected
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Check if content script is injected by looking for injected elements or functions
      const isInjected = await contentPage.evaluate(() => {
        return window.hasOwnProperty('__pokerAnalyzerInjected');
      });

      // Note: This might fail if the content script doesn't set a flag
      // You may need to modify content.ts to set window.__pokerAnalyzerInjected = true
    });
  });

  describe('Poker Hand Analysis', () => {
    it('should analyze poker hands from the page', async () => {
      // Load test page with poker content
      const testPagePath = path.resolve(__dirname, '../../chrome-extension/test-page.html');
      await loadTestPage(contentPage, testPagePath);
      
      // Wait for page to load
      await contentPage.waitForSelector('.card-container', { timeout: 5000 });

      // Click analyze button in extension popup
      await extensionPage.click('#analyzeButton');

      // Wait for results
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Check if results are displayed
      const resultsText = await extensionPage.$eval('#results', (el) => el.textContent);
      expect(resultsText).toBeTruthy();
      expect(resultsText).not.toBe('');
    });

    it('should detect different poker hands correctly', async () => {
      // Test cases for different hands
      const testCases = [
        {
          cards: ['AS', 'KS', 'QS', 'JS', '10S'],
          expectedHand: 'Royal Flush'
        },
        {
          cards: ['2H', '3H', '4H', '5H', '6H'],
          expectedHand: 'Straight Flush'
        },
        {
          cards: ['KD', 'KH', 'KC', 'KS', '3D'],
          expectedHand: 'Four of a Kind'
        },
        {
          cards: ['QC', 'QD', 'QH', '7C', '7D'],
          expectedHand: 'Full House'
        }
      ];

      // You would need to create test pages or modify the content page
      // to test different card combinations
    });
  });

  describe('Error Handling', () => {
    it('should handle pages without poker content gracefully', async () => {
      // Navigate to a non-poker page
      await contentPage.goto('about:blank');

      // Try to analyze
      await extensionPage.click('#analyzeButton');
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Check for error message or empty results
      const resultsText = await extensionPage.$eval('#results', (el) => el.textContent);
      expect(resultsText).toMatch(/no poker content found|error|could not analyze/i);
    });

    it('should handle network errors', async () => {
      // Simulate offline mode
      await contentPage.setOfflineMode(true);

      // Try to analyze
      await extensionPage.click('#analyzeButton');
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Check for appropriate error handling
      const resultsText = await extensionPage.$eval('#results', (el) => el.textContent);
      expect(resultsText).toBeTruthy();
    });
  });

  describe('Performance', () => {
    it('should analyze hands within acceptable time', async () => {
      const testPagePath = path.resolve(__dirname, '../../chrome-extension/test-page.html');
      await loadTestPage(contentPage, testPagePath);

      const startTime = Date.now();
      await extensionPage.click('#analyzeButton');
      
      // Wait for results with timeout
      await extensionPage.waitForFunction(
        () => {
          const results = document.querySelector('#results');
          return results && results.textContent && results.textContent.trim() !== '';
        },
        { timeout: 5000 }
      );

      const endTime = Date.now();
      const analysisTime = endTime - startTime;

      // Analysis should complete within 5 seconds
      expect(analysisTime).toBeLessThan(5000);
    });
  });

  describe('User Interface Interactions', () => {
    it('should disable analyze button while processing', async () => {
      const testPagePath = path.resolve(__dirname, '../../chrome-extension/test-page.html');
      await loadTestPage(contentPage, testPagePath);

      // Click analyze button
      await extensionPage.click('#analyzeButton');

      // Check if button is disabled immediately
      const isDisabled = await extensionPage.$eval('#analyzeButton', (el) => (el as HTMLButtonElement).disabled);
      expect(isDisabled).toBe(true);

      // Wait for analysis to complete
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Check if button is re-enabled
      const isEnabledAgain = await extensionPage.$eval('#analyzeButton', (el) => !(el as HTMLButtonElement).disabled);
      expect(isEnabledAgain).toBe(true);
    });

    it('should clear previous results before new analysis', async () => {
      const testPagePath = path.resolve(__dirname, '../../chrome-extension/test-page.html');
      await loadTestPage(contentPage, testPagePath);

      // First analysis
      await extensionPage.click('#analyzeButton');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const firstResults = await extensionPage.$eval('#results', (el) => el.textContent);
      expect(firstResults).toBeTruthy();

      // Second analysis
      await extensionPage.click('#analyzeButton');
      
      // Results should be cleared immediately
      const clearedResults = await extensionPage.$eval('#results', (el) => el.textContent);
      expect(clearedResults?.trim()).toBe('');
    });
  });
});